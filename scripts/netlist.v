/* Generated by Yosys 0.53 (git sha1 53c22ab7c0ced80861c7536c5dae682c30fb5834, clang++ 17.0.0 -fPIC -O3) */

(* src = "src/hamming_decoder.v:8.1-50.10" *)
module hamming_decoder(code_in, code_out, error_location, error_flag);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  (* src = "src/hamming_decoder.v:9.23-9.30" *)
  wire _069_;
  (* src = "src/hamming_decoder.v:9.23-9.30" *)
  wire _070_;
  (* src = "src/hamming_decoder.v:9.23-9.30" *)
  wire _071_;
  (* src = "src/hamming_decoder.v:9.23-9.30" *)
  wire _072_;
  (* src = "src/hamming_decoder.v:9.23-9.30" *)
  wire _073_;
  (* src = "src/hamming_decoder.v:9.23-9.30" *)
  wire _074_;
  (* src = "src/hamming_decoder.v:9.23-9.30" *)
  wire _075_;
  (* src = "src/hamming_decoder.v:9.23-9.30" *)
  wire _076_;
  (* src = "src/hamming_decoder.v:10.23-10.31" *)
  wire _077_;
  (* src = "src/hamming_decoder.v:10.23-10.31" *)
  wire _078_;
  (* src = "src/hamming_decoder.v:10.23-10.31" *)
  wire _079_;
  (* src = "src/hamming_decoder.v:10.23-10.31" *)
  wire _080_;
  (* src = "src/hamming_decoder.v:10.23-10.31" *)
  wire _081_;
  (* src = "src/hamming_decoder.v:10.23-10.31" *)
  wire _082_;
  (* src = "src/hamming_decoder.v:10.23-10.31" *)
  wire _083_;
  (* src = "src/hamming_decoder.v:10.23-10.31" *)
  wire _084_;
  (* src = "src/hamming_decoder.v:12.23-12.33" *)
  wire _085_;
  (* src = "src/hamming_decoder.v:12.23-12.33" *)
  wire _086_;
  (* src = "src/hamming_decoder.v:11.23-11.37" *)
  wire _087_;
  (* src = "src/hamming_decoder.v:11.23-11.37" *)
  wire _088_;
  (* src = "src/hamming_decoder.v:11.23-11.37" *)
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  (* src = "src/hamming_decoder.v:9.23-9.30" *)
  input [7:0] code_in;
  wire [7:0] code_in;
  (* src = "src/hamming_decoder.v:10.23-10.31" *)
  output [7:0] code_out;
  wire [7:0] code_out;
  (* src = "src/hamming_decoder.v:12.23-12.33" *)
  output [1:0] error_flag;
  wire [1:0] error_flag;
  (* src = "src/hamming_decoder.v:11.23-11.37" *)
  output [2:0] error_location;
  wire [2:0] error_location;
  (* src = "src/hamming_decoder.v:17.16-17.24" *)
  (* unused_bits = "0 1 2" *)
  wire [3:0] syndrome;
  sky130_fd_sc_hd__clkinv_1 _115_ (
    .A(_072_),
    .Y(_090_)
  );
  sky130_fd_sc_hd__xor2_1 _116_ (
    .A(_070_),
    .B(_069_),
    .X(_091_)
  );
  sky130_fd_sc_hd__xor2_1 _117_ (
    .A(_072_),
    .B(_071_),
    .X(_092_)
  );
  sky130_fd_sc_hd__xnor2_1 _118_ (
    .A(_074_),
    .B(_075_),
    .Y(_093_)
  );
  sky130_fd_sc_hd__xor2_1 _119_ (
    .A(_073_),
    .B(_075_),
    .X(_094_)
  );
  sky130_fd_sc_hd__xnor3_1 _120_ (
    .A(_074_),
    .B(_073_),
    .C(_075_),
    .X(_095_)
  );
  sky130_fd_sc_hd__xnor3_1 _121_ (
    .A(_091_),
    .B(_092_),
    .C(_095_),
    .X(_096_)
  );
  sky130_fd_sc_hd__xnor2_1 _122_ (
    .A(_076_),
    .B(_096_),
    .Y(_097_)
  );
  sky130_fd_sc_hd__clkinv_1 _123_ (
    .A(_097_),
    .Y(_085_)
  );
  sky130_fd_sc_hd__xnor2_1 _124_ (
    .A(_069_),
    .B(_071_),
    .Y(_098_)
  );
  sky130_fd_sc_hd__xor2_1 _125_ (
    .A(_094_),
    .B(_098_),
    .X(_099_)
  );
  sky130_fd_sc_hd__xnor2_1 _126_ (
    .A(_094_),
    .B(_098_),
    .Y(_100_)
  );
  sky130_fd_sc_hd__xnor2_1 _127_ (
    .A(_090_),
    .B(_095_),
    .Y(_101_)
  );
  sky130_fd_sc_hd__xnor2_1 _128_ (
    .A(_072_),
    .B(_095_),
    .Y(_102_)
  );
  sky130_fd_sc_hd__xnor2_1 _129_ (
    .A(_070_),
    .B(_071_),
    .Y(_103_)
  );
  sky130_fd_sc_hd__xnor2_1 _130_ (
    .A(_093_),
    .B(_103_),
    .Y(_104_)
  );
  sky130_fd_sc_hd__nand2_1 _131_ (
    .A(_101_),
    .B(_104_),
    .Y(_105_)
  );
  sky130_fd_sc_hd__nor2_1 _132_ (
    .A(_100_),
    .B(_105_),
    .Y(_106_)
  );
  sky130_fd_sc_hd__nor2_1 _133_ (
    .A(_085_),
    .B(_106_),
    .Y(_086_)
  );
  sky130_fd_sc_hd__nor2_1 _134_ (
    .A(_097_),
    .B(_099_),
    .Y(_087_)
  );
  sky130_fd_sc_hd__nor2_1 _135_ (
    .A(_097_),
    .B(_104_),
    .Y(_088_)
  );
  sky130_fd_sc_hd__nor2_1 _136_ (
    .A(_097_),
    .B(_101_),
    .Y(_089_)
  );
  sky130_fd_sc_hd__nor3_1 _137_ (
    .A(_097_),
    .B(_099_),
    .C(_105_),
    .Y(_107_)
  );
  sky130_fd_sc_hd__xor2_1 _138_ (
    .A(_069_),
    .B(_107_),
    .X(_077_)
  );
  sky130_fd_sc_hd__nor4_1 _139_ (
    .A(_097_),
    .B(_100_),
    .C(_102_),
    .D(_104_),
    .Y(_108_)
  );
  sky130_fd_sc_hd__xor2_1 _140_ (
    .A(_070_),
    .B(_108_),
    .X(_078_)
  );
  sky130_fd_sc_hd__nor4_1 _141_ (
    .A(_097_),
    .B(_099_),
    .C(_102_),
    .D(_104_),
    .Y(_109_)
  );
  sky130_fd_sc_hd__xor2_1 _142_ (
    .A(_071_),
    .B(_109_),
    .X(_079_)
  );
  sky130_fd_sc_hd__nor3b_1 _143_ (
    .A(_097_),
    .B(_100_),
    .C_N(_104_),
    .Y(_110_)
  );
  sky130_fd_sc_hd__mux2i_1 _144_ (
    .A0(_090_),
    .A1(_095_),
    .S(_110_),
    .Y(_080_)
  );
  sky130_fd_sc_hd__nand2_1 _145_ (
    .A(_100_),
    .B(_104_),
    .Y(_111_)
  );
  sky130_fd_sc_hd__nor3_1 _146_ (
    .A(_097_),
    .B(_101_),
    .C(_111_),
    .Y(_112_)
  );
  sky130_fd_sc_hd__xor2_1 _147_ (
    .A(_073_),
    .B(_112_),
    .X(_081_)
  );
  sky130_fd_sc_hd__nor4_1 _148_ (
    .A(_097_),
    .B(_100_),
    .C(_101_),
    .D(_104_),
    .Y(_113_)
  );
  sky130_fd_sc_hd__xor2_1 _149_ (
    .A(_074_),
    .B(_113_),
    .X(_082_)
  );
  sky130_fd_sc_hd__nor4_1 _150_ (
    .A(_097_),
    .B(_099_),
    .C(_101_),
    .D(_104_),
    .Y(_114_)
  );
  sky130_fd_sc_hd__xor2_1 _151_ (
    .A(_075_),
    .B(_114_),
    .X(_083_)
  );
  sky130_fd_sc_hd__mux2_1 _152_ (
    .A0(_076_),
    .A1(_096_),
    .S(_106_),
    .X(_084_)
  );
  assign syndrome[3] = error_flag[0];
  assign _070_ = code_in[1];
  assign _069_ = code_in[0];
  assign _072_ = code_in[3];
  assign _071_ = code_in[2];
  assign _074_ = code_in[5];
  assign _073_ = code_in[4];
  assign _075_ = code_in[6];
  assign _076_ = code_in[7];
  assign error_flag[0] = _085_;
  assign error_flag[1] = _086_;
  assign error_location[0] = _087_;
  assign error_location[1] = _088_;
  assign error_location[2] = _089_;
  assign code_out[0] = _077_;
  assign code_out[1] = _078_;
  assign code_out[2] = _079_;
  assign code_out[3] = _080_;
  assign code_out[4] = _081_;
  assign code_out[5] = _082_;
  assign code_out[6] = _083_;
  assign code_out[7] = _084_;
endmodule

(* src = "src/hamming_encoder.v:8.1-24.10" *)
module hamming_encoder(data_in, code_out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "src/hamming_encoder.v:14.25-14.27" *)
  wire _10_;
  (* src = "src/hamming_encoder.v:14.21-14.23" *)
  wire _11_;
  (* src = "src/hamming_encoder.v:14.17-14.19" *)
  wire _12_;
  (* src = "src/hamming_encoder.v:14.10-14.15" *)
  wire _13_;
  (* src = "src/hamming_encoder.v:9.23-9.30" *)
  wire _14_;
  (* src = "src/hamming_encoder.v:9.23-9.30" *)
  wire _15_;
  (* src = "src/hamming_encoder.v:9.23-9.30" *)
  wire _16_;
  (* src = "src/hamming_encoder.v:9.23-9.30" *)
  wire _17_;
  (* src = "src/hamming_encoder.v:14.25-14.27" *)
  wire c0;
  (* src = "src/hamming_encoder.v:14.21-14.23" *)
  wire c1;
  (* src = "src/hamming_encoder.v:14.17-14.19" *)
  wire c2;
  (* src = "src/hamming_encoder.v:14.10-14.15" *)
  wire c_all;
  (* src = "src/hamming_encoder.v:10.23-10.31" *)
  output [7:0] code_out;
  wire [7:0] code_out;
  (* src = "src/hamming_encoder.v:9.23-9.30" *)
  input [3:0] data_in;
  wire [3:0] data_in;
  sky130_fd_sc_hd__xor3_1 _18_ (
    .A(_17_),
    .B(_15_),
    .C(_14_),
    .X(_10_)
  );
  sky130_fd_sc_hd__xor3_1 _19_ (
    .A(_17_),
    .B(_14_),
    .C(_16_),
    .X(_11_)
  );
  sky130_fd_sc_hd__xor3_1 _20_ (
    .A(_17_),
    .B(_15_),
    .C(_16_),
    .X(_12_)
  );
  sky130_fd_sc_hd__xor3_1 _21_ (
    .A(_15_),
    .B(_14_),
    .C(_16_),
    .X(_13_)
  );
  assign code_out = { c_all, data_in[3:1], c2, data_in[0], c1, c0 };
  assign _17_ = data_in[3];
  assign _15_ = data_in[1];
  assign _14_ = data_in[0];
  assign c0 = _10_;
  assign _16_ = data_in[2];
  assign c1 = _11_;
  assign c2 = _12_;
  assign c_all = _13_;
endmodule

(* top =  1  *)
(* src = "src/project.v:8.1-155.10" *)
module tt_um_hamming_top(ui_in, uo_out, uio_in, uio_out, uio_oe, ena, clk, rst_n);
  (* src = "src/project.v:122.3-146.6" *)
  wire [7:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  (* src = "src/project.v:122.3-146.6" *)
  wire _038_;
  (* src = "src/project.v:122.3-146.6" *)
  wire _039_;
  (* src = "src/project.v:122.3-146.6" *)
  wire _040_;
  (* src = "src/project.v:122.3-146.6" *)
  wire _041_;
  (* src = "src/project.v:122.3-146.6" *)
  wire _042_;
  (* src = "src/project.v:122.3-146.6" *)
  wire _043_;
  (* src = "src/project.v:122.3-146.6" *)
  wire _044_;
  (* src = "src/project.v:122.3-146.6" *)
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  (* src = "src/project.v:30.13-30.23" *)
  wire _053_;
  (* src = "src/project.v:30.13-30.23" *)
  wire _054_;
  (* src = "src/project.v:30.13-30.23" *)
  wire _055_;
  (* src = "src/project.v:41.14-41.26" *)
  wire _056_;
  (* src = "src/project.v:41.14-41.26" *)
  wire _057_;
  (* src = "src/project.v:41.14-41.26" *)
  wire _058_;
  (* src = "src/project.v:41.14-41.26" *)
  wire _059_;
  (* src = "src/project.v:41.14-41.26" *)
  wire _060_;
  (* src = "src/project.v:41.14-41.26" *)
  wire _061_;
  (* src = "src/project.v:41.14-41.26" *)
  wire _062_;
  (* src = "src/project.v:41.14-41.26" *)
  wire _063_;
  (* src = "src/project.v:40.14-40.26" *)
  wire _064_;
  (* src = "src/project.v:40.14-40.26" *)
  wire _065_;
  (* src = "src/project.v:40.14-40.26" *)
  wire _066_;
  (* src = "src/project.v:40.14-40.26" *)
  wire _067_;
  (* src = "src/project.v:40.14-40.26" *)
  wire _068_;
  (* src = "src/project.v:40.14-40.26" *)
  wire _069_;
  (* src = "src/project.v:40.14-40.26" *)
  wire _070_;
  (* src = "src/project.v:40.14-40.26" *)
  wire _071_;
  (* src = "src/project.v:43.14-43.20" *)
  wire _072_;
  (* src = "src/project.v:43.14-43.20" *)
  wire _073_;
  (* src = "src/project.v:32.13-32.24" *)
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  (* src = "src/project.v:31.13-31.23" *)
  wire _101_;
  (* src = "src/project.v:31.13-31.23" *)
  wire _102_;
  (* src = "src/project.v:31.13-31.23" *)
  wire _103_;
  (* src = "src/project.v:42.14-42.22" *)
  wire _104_;
  (* src = "src/project.v:42.14-42.22" *)
  wire _105_;
  (* src = "src/project.v:42.14-42.22" *)
  wire _106_;
  (* src = "src/project.v:9.23-9.28" *)
  wire _107_;
  (* src = "src/project.v:9.23-9.28" *)
  wire _108_;
  (* src = "src/project.v:9.23-9.28" *)
  wire _109_;
  (* src = "src/project.v:9.23-9.28" *)
  wire _110_;
  (* src = "src/project.v:9.23-9.28" *)
  wire _111_;
  (* src = "src/project.v:150.8-150.15" *)
  wire _unused;
  (* src = "src/project.v:15.23-15.26" *)
  input clk;
  wire clk;
  (* src = "src/project.v:30.13-30.23" *)
  reg [2:0] curr_state;
  (* src = "src/project.v:33.13-33.20" *)
  reg [7:0] data_in;
  (* src = "src/project.v:34.13-34.21" *)
  reg [7:0] data_out;
  (* src = "src/project.v:41.14-41.26" *)
  wire [7:0] decoded_data;
  (* src = "src/project.v:14.23-14.26" *)
  input ena;
  wire ena;
  (* src = "src/project.v:40.14-40.26" *)
  wire [7:0] encoded_code;
  (* src = "src/project.v:43.14-43.20" *)
  wire [1:0] errors;
  (* src = "src/project.v:32.13-32.24" *)
  reg mode_select;
  (* src = "src/project.v:31.13-31.23" *)
  wire [2:0] next_state;
  (* src = "src/project.v:16.23-16.28" *)
  input rst_n;
  wire rst_n;
  (* src = "src/project.v:58.8-58.13" *)
  wire start;
  (* src = "src/project.v:42.14-42.22" *)
  wire [2:0] syndrome;
  (* src = "src/project.v:9.23-9.28" *)
  input [7:0] ui_in;
  wire [7:0] ui_in;
  (* src = "src/project.v:11.23-11.29" *)
  input [7:0] uio_in;
  wire [7:0] uio_in;
  (* src = "src/project.v:13.23-13.29" *)
  output [7:0] uio_oe;
  wire [7:0] uio_oe;
  (* src = "src/project.v:12.23-12.30" *)
  output [7:0] uio_out;
  wire [7:0] uio_out;
  (* src = "src/project.v:10.23-10.29" *)
  output [7:0] uo_out;
  wire [7:0] uo_out;
  sky130_fd_sc_hd__nor3b_1 _112_ (
    .A(_055_),
    .B(_054_),
    .C_N(_053_),
    .Y(_048_)
  );
  sky130_fd_sc_hd__nor2_1 _113_ (
    .A(_055_),
    .B(_053_),
    .Y(_075_)
  );
  sky130_fd_sc_hd__nand2_1 _114_ (
    .A(_054_),
    .B(_075_),
    .Y(_047_)
  );
  sky130_fd_sc_hd__nand2_1 _115_ (
    .A(_054_),
    .B(_053_),
    .Y(_076_)
  );
  sky130_fd_sc_hd__nor2_1 _116_ (
    .A(_055_),
    .B(_076_),
    .Y(_103_)
  );
  sky130_fd_sc_hd__nor3b_1 _117_ (
    .A(_054_),
    .B(_053_),
    .C_N(_055_),
    .Y(_077_)
  );
  sky130_fd_sc_hd__or3b_1 _118_ (
    .A(_054_),
    .B(_053_),
    .C_N(_055_),
    .X(_078_)
  );
  sky130_fd_sc_hd__o21ai_0 _119_ (
    .A1(_055_),
    .A2(_076_),
    .B1(_078_),
    .Y(_046_)
  );
  sky130_fd_sc_hd__nand2_1 _120_ (
    .A(_056_),
    .B(_078_),
    .Y(_079_)
  );
  sky130_fd_sc_hd__nand2_1 _121_ (
    .A(_072_),
    .B(_077_),
    .Y(_080_)
  );
  sky130_fd_sc_hd__nor2_1 _122_ (
    .A(_064_),
    .B(_074_),
    .Y(_081_)
  );
  sky130_fd_sc_hd__a31oi_1 _123_ (
    .A1(_074_),
    .A2(_079_),
    .A3(_080_),
    .B1(_081_),
    .Y(_038_)
  );
  sky130_fd_sc_hd__nand2_1 _124_ (
    .A(_057_),
    .B(_078_),
    .Y(_082_)
  );
  sky130_fd_sc_hd__nand2_1 _125_ (
    .A(_073_),
    .B(_077_),
    .Y(_083_)
  );
  sky130_fd_sc_hd__nor2_1 _126_ (
    .A(_074_),
    .B(_065_),
    .Y(_084_)
  );
  sky130_fd_sc_hd__a31oi_1 _127_ (
    .A1(_074_),
    .A2(_082_),
    .A3(_083_),
    .B1(_084_),
    .Y(_039_)
  );
  sky130_fd_sc_hd__nand2_1 _128_ (
    .A(_058_),
    .B(_078_),
    .Y(_085_)
  );
  sky130_fd_sc_hd__nand2_1 _129_ (
    .A(_104_),
    .B(_077_),
    .Y(_086_)
  );
  sky130_fd_sc_hd__nor2_1 _130_ (
    .A(_074_),
    .B(_066_),
    .Y(_087_)
  );
  sky130_fd_sc_hd__a31oi_1 _131_ (
    .A1(_074_),
    .A2(_085_),
    .A3(_086_),
    .B1(_087_),
    .Y(_040_)
  );
  sky130_fd_sc_hd__nand2_1 _132_ (
    .A(_059_),
    .B(_078_),
    .Y(_088_)
  );
  sky130_fd_sc_hd__nand2_1 _133_ (
    .A(_105_),
    .B(_077_),
    .Y(_089_)
  );
  sky130_fd_sc_hd__nor2_1 _134_ (
    .A(_074_),
    .B(_067_),
    .Y(_090_)
  );
  sky130_fd_sc_hd__a31oi_1 _135_ (
    .A1(_074_),
    .A2(_088_),
    .A3(_089_),
    .B1(_090_),
    .Y(_041_)
  );
  sky130_fd_sc_hd__nand2_1 _136_ (
    .A(_060_),
    .B(_078_),
    .Y(_091_)
  );
  sky130_fd_sc_hd__nand2_1 _137_ (
    .A(_106_),
    .B(_077_),
    .Y(_092_)
  );
  sky130_fd_sc_hd__nor2_1 _138_ (
    .A(_074_),
    .B(_068_),
    .Y(_093_)
  );
  sky130_fd_sc_hd__a31oi_1 _139_ (
    .A1(_074_),
    .A2(_091_),
    .A3(_092_),
    .B1(_093_),
    .Y(_042_)
  );
  sky130_fd_sc_hd__nand2_1 _140_ (
    .A(_061_),
    .B(_078_),
    .Y(_094_)
  );
  sky130_fd_sc_hd__nor2_1 _141_ (
    .A(_074_),
    .B(_069_),
    .Y(_095_)
  );
  sky130_fd_sc_hd__a21oi_1 _142_ (
    .A1(_074_),
    .A2(_094_),
    .B1(_095_),
    .Y(_043_)
  );
  sky130_fd_sc_hd__nand2_1 _143_ (
    .A(_062_),
    .B(_078_),
    .Y(_096_)
  );
  sky130_fd_sc_hd__nor2_1 _144_ (
    .A(_074_),
    .B(_070_),
    .Y(_097_)
  );
  sky130_fd_sc_hd__a21oi_1 _145_ (
    .A1(_074_),
    .A2(_096_),
    .B1(_097_),
    .Y(_044_)
  );
  sky130_fd_sc_hd__nand2_1 _146_ (
    .A(_063_),
    .B(_078_),
    .Y(_098_)
  );
  sky130_fd_sc_hd__nor2_1 _147_ (
    .A(_074_),
    .B(_071_),
    .Y(_099_)
  );
  sky130_fd_sc_hd__a21oi_1 _148_ (
    .A1(_074_),
    .A2(_098_),
    .B1(_099_),
    .Y(_045_)
  );
  sky130_fd_sc_hd__and2_0 _149_ (
    .A(_074_),
    .B(_108_),
    .X(_049_)
  );
  sky130_fd_sc_hd__and2_0 _150_ (
    .A(_074_),
    .B(_109_),
    .X(_050_)
  );
  sky130_fd_sc_hd__and2_0 _151_ (
    .A(_074_),
    .B(_110_),
    .X(_051_)
  );
  sky130_fd_sc_hd__and2_0 _152_ (
    .A(_074_),
    .B(_111_),
    .X(_052_)
  );
  sky130_fd_sc_hd__nand2_1 _153_ (
    .A(_107_),
    .B(_075_),
    .Y(_100_)
  );
  sky130_fd_sc_hd__nand2_1 _154_ (
    .A(_047_),
    .B(_100_),
    .Y(_101_)
  );
  sky130_fd_sc_hd__nand2b_1 _155_ (
    .A_N(_048_),
    .B(_047_),
    .Y(_102_)
  );
  (* src = "src/project.v:95.3-119.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) mode_select <= 1'h0;
    else if (_005_) mode_select <= ui_in[0];
  (* src = "src/project.v:122.3-146.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_out[0] <= 1'h0;
    else if (_001_) data_out[0] <= _000_[0];
  (* src = "src/project.v:122.3-146.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_out[1] <= 1'h0;
    else if (_001_) data_out[1] <= _000_[1];
  (* src = "src/project.v:122.3-146.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_out[2] <= 1'h0;
    else if (_001_) data_out[2] <= _000_[2];
  (* src = "src/project.v:122.3-146.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_out[3] <= 1'h0;
    else if (_001_) data_out[3] <= _000_[3];
  (* src = "src/project.v:122.3-146.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_out[4] <= 1'h0;
    else if (_001_) data_out[4] <= _000_[4];
  (* src = "src/project.v:122.3-146.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_out[5] <= 1'h0;
    else if (_001_) data_out[5] <= _000_[5];
  (* src = "src/project.v:122.3-146.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_out[6] <= 1'h0;
    else if (_001_) data_out[6] <= _000_[6];
  (* src = "src/project.v:122.3-146.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_out[7] <= 1'h0;
    else if (_001_) data_out[7] <= _000_[7];
  (* src = "src/project.v:95.3-119.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_in[0] <= 1'h0;
    else if (!_002_) data_in[0] <= ui_in[0];
  (* src = "src/project.v:95.3-119.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_in[1] <= 1'h0;
    else if (!_002_) data_in[1] <= ui_in[1];
  (* src = "src/project.v:95.3-119.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_in[2] <= 1'h0;
    else if (!_002_) data_in[2] <= ui_in[2];
  (* src = "src/project.v:95.3-119.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_in[3] <= 1'h0;
    else if (!_002_) data_in[3] <= ui_in[3];
  (* src = "src/project.v:95.3-119.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_in[4] <= 1'h0;
    else if (!_002_) data_in[4] <= _034_;
  (* src = "src/project.v:95.3-119.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_in[5] <= 1'h0;
    else if (!_002_) data_in[5] <= _035_;
  (* src = "src/project.v:95.3-119.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_in[6] <= 1'h0;
    else if (!_002_) data_in[6] <= _036_;
  (* src = "src/project.v:95.3-119.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) data_in[7] <= 1'h0;
    else if (!_002_) data_in[7] <= _037_;
  (* src = "src/project.v:60.3-67.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) curr_state[0] <= 1'h0;
    else curr_state[0] <= next_state[0];
  (* src = "src/project.v:60.3-67.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) curr_state[1] <= 1'h0;
    else curr_state[1] <= next_state[1];
  (* src = "src/project.v:60.3-67.6" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) curr_state[2] <= 1'h0;
    else curr_state[2] <= next_state[2];
  (* module_not_derived = 32'd1 *)
  (* src = "src/project.v:50.19-55.4" *)
  hamming_decoder hamming_decoder_inst (
    .code_in(data_in),
    .code_out(decoded_data),
    .error_flag(errors),
    .error_location(syndrome)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "src/project.v:45.19-48.4" *)
  hamming_encoder hamming_encoder_inst (
    .code_out(encoded_code),
    .data_in(data_in[3:0])
  );
  assign _unused = 1'h0;
  assign start = ui_in[0];
  assign uio_oe = 8'h00;
  assign uio_out = 8'h00;
  assign uo_out = data_out;
  assign _055_ = curr_state[2];
  assign _054_ = curr_state[1];
  assign _053_ = curr_state[0];
  assign _005_ = _048_;
  assign _002_ = _047_;
  assign _001_ = _046_;
  assign _064_ = encoded_code[0];
  assign _072_ = errors[0];
  assign _074_ = mode_select;
  assign _056_ = decoded_data[0];
  assign _000_[0] = _038_;
  assign _065_ = encoded_code[1];
  assign _073_ = errors[1];
  assign _057_ = decoded_data[1];
  assign _000_[1] = _039_;
  assign _066_ = encoded_code[2];
  assign _104_ = syndrome[0];
  assign _058_ = decoded_data[2];
  assign _000_[2] = _040_;
  assign _067_ = encoded_code[3];
  assign _105_ = syndrome[1];
  assign _059_ = decoded_data[3];
  assign _000_[3] = _041_;
  assign _068_ = encoded_code[4];
  assign _106_ = syndrome[2];
  assign _060_ = decoded_data[4];
  assign _000_[4] = _042_;
  assign _069_ = encoded_code[5];
  assign _061_ = decoded_data[5];
  assign _000_[5] = _043_;
  assign _070_ = encoded_code[6];
  assign _062_ = decoded_data[6];
  assign _000_[6] = _044_;
  assign _071_ = encoded_code[7];
  assign _063_ = decoded_data[7];
  assign _000_[7] = _045_;
  assign _108_ = ui_in[4];
  assign _034_ = _049_;
  assign _109_ = ui_in[5];
  assign _035_ = _050_;
  assign _110_ = ui_in[6];
  assign _036_ = _051_;
  assign _111_ = ui_in[7];
  assign _037_ = _052_;
  assign _107_ = ui_in[0];
  assign next_state[0] = _101_;
  assign next_state[1] = _102_;
  assign next_state[2] = _103_;
endmodule
